package com.gabrielsousa.pizzaamore.config;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

	@Autowired
	private AuthenticationConfiguration authenticationConfiguration;
	
	private static final String[] PUBLIC_MATCHERS = { 
			"/h2-console/**",
			"/pizza/**",
	};

//	private static final String[] PUBLIC_MATCHERS_GET = {
//			
//	};
//
//	private static final String[] PUBLIC_MATCHERS_POST = {
//			
//	};
	
	@Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
     
    	if(Arrays.asList(env.getActiveProfiles()).contains("test")) {
    		http.headers().frameOptions().disable();
    	}
    	http.cors().and().csrf().disable();
        http.authorizeRequests()
        		.antMatchers(PUBLIC_MATCHERS).permitAll()
        		.antMatchers(HttpMethod.GET,PUBLIC_MATCHERS_GET).permitAll()
        		.antMatchers(HttpMethod.POST,PUBLIC_MATCHERS_POST).permitAll()
//                .antMatchers("/requests/**", "/products/**").hasAnyAuthority("Admin")
                //.hasAnyRole("Admin")
                //.hasAuthority("Admin")
//                .antMatchers("/requests/**").hasAnyAuthority("Admin")
//                .hasAnyAuthority("Admin", "Editor", "Salesperson")
//                .hasAnyAuthority("Admin", "Editor", "Salesperson", "Shipper")
                .anyRequest().authenticated()
//                .and().formLogin()
//                .loginPage("/login")
//                    .usernameParameter("email")
//                    .permitAll()
//                .and()
//                .rememberMe().key("AbcdEfghIjklmNopQrsTuvXyz_0123456789")
//                .and()
//                .logout().permitAll()
//                ;
//        http.addFilter(new JWTAuthenticationFilter(authenticationManager(authenticationConfiguration), jWTUtil));
//        //TODO-Atenção JWT não está funcionando
////        http.addFilterBefore(new JWTAuthenticationFilter(jWTUtil), UsernamePasswordAuthenticationFilter.class);
//        http.addFilter(new JWTAuthorizationFilter(authenticationManager(authenticationConfiguration), jWTUtil, userDetailsService));
////        http.authenticationManager(new JWTAuthenticationFilter(authenticationManager(null),jWTUtil));
        http.headers().frameOptions().sameOrigin();
        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
       
//        http.apply(customDsl());
        
        return http.build();
    }
    
	//TODO-forma nova
	@Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
		return authenticationConfiguration.getAuthenticationManager();
    }
}
